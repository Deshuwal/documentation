{"version":3,"file":"ng-helmet.service.js","sourceRoot":"","sources":["../../../../../packages/ng-helmet/src/lib/ng-helmet.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Inject, Injectable, Optional } from \"@angular/core\";\nimport { Meta, Title } from \"@angular/platform-browser\";\nimport { NgHelmetConfig } from \"./ng-helmet.config\";\nimport { NgHelmet, MetaDefinitions } from \"./ng-helmet.model\";\nimport { NG_HELMET_CONFIG_TOKEN } from \"./ng-helmet.tokens\";\n\ntype HelmetStack = { readonly id: number; helmet: NgHelmet }[];\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class NgHelmetService {\n  constructor(\n    private readonly title: Title,\n    private readonly meta: Meta,\n    @Optional()\n    @Inject(NG_HELMET_CONFIG_TOKEN)\n    private readonly config?: NgHelmetConfig\n  ) {}\n\n  private readonly helmetStack: HelmetStack = [];\n\n  /**\n   * Push a new helmet on to the helmetStack and update the document head.\n   * If the helmet id already exists in the stack (i.e. the ng-helmet content\n   * was updated), this method simply updates the helmet at the existing position.\n   * @param id The id of the NgHelmetComponent this helmet comes from.\n   * @param helmet the NgHelmet data harvested from the component.\n   */\n  pushHelmet(id: number, helmet: NgHelmet): void {\n    const index = this.helmetStack.findIndex((e) => e.id === id);\n    if (index === -1) {\n      this.helmetStack.push({ id, helmet });\n    } else {\n      this.helmetStack[index].helmet = helmet;\n    }\n    this.applyHelmet(this.computeHelmet());\n  }\n\n  /**\n   * Pop the top element off the helmetStack and update the document head.\n   */\n  popHelmet(): void {\n    const top = this.helmetStack.pop();\n    if (top) {\n      // Drop the content attribute from all top metas so they get cleared.\n      const topMetas = top.helmet.metas;\n      Object.keys(topMetas).forEach((selector) => {\n        const { content: _, ...rest } = topMetas[selector];\n        topMetas[selector] = rest;\n      });\n\n      // Merge top metas to clear with new computed metas.\n      const { title, metas } = this.computeHelmet();\n      this.applyHelmet({ title, metas: { ...topMetas, ...metas } });\n    } else {\n      throw new Error(`popped an empty helmetStack`);\n    }\n  }\n\n  /**\n   * Compute the current helmet from the stack.\n   * @returns The current helmet.\n   */\n  private computeHelmet(): NgHelmet {\n    if (this.helmetStack.length > 0) {\n      return this.helmetStack\n        .map((e) => e.helmet)\n        .reduce((acc, el) => ({\n          title: el.title ?? acc.title,\n          metas: { ...acc.metas, ...el.metas },\n        }));\n    }\n    return { metas: {} };\n  }\n\n  /**\n   * Apply the given helmet to the document header.\n   * @param helmet The helmet to apply.\n   */\n  private applyHelmet(helmet: NgHelmet): void {\n    if (helmet.title) {\n      const baseTitle = this.config?.baseTitle;\n      const title = baseTitle ? `${helmet.title} ${baseTitle}` : helmet.title;\n      this.title.setTitle(title);\n    }\n    this.applyMetaDefinitions(helmet.metas);\n  }\n\n  /**\n   * Apply the MetaDefinitions to the document head.\n   * If the MetaDefinition has no content, this method will remove the\n   * corresponding tag.\n   * @param metas The MetaDefinitions to apply to the document.\n   */\n  private applyMetaDefinitions(metas: MetaDefinitions): void {\n    Object.keys(metas).forEach((selector) => {\n      const tag = metas[selector];\n      if (!tag.content) {\n        this.meta.removeTag(selector);\n      } else if (this.meta.getTag(selector)) {\n        this.meta.updateTag(tag);\n      } else {\n        this.meta.addTag(tag);\n      }\n    });\n  }\n}\n"]}