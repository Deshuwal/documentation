import { Component, ContentChildren, ElementRef, HostBinding, QueryList, } from "@angular/core";
import { NgHelmetTitleComponent } from "./ng-helmet-title.component";
import { NgHelmetMetaComponent } from "./ng-helmet-meta.component";
import { buildHelmet } from "./ng-helmet.model";
import { NgHelmetService } from "./ng-helmet.service";
import { combineLatest, Subject } from "rxjs";
import { map, takeUntil } from "rxjs/operators";
let currentId = 0;
export class NgHelmetComponent {
    constructor(el, ngHelmetService) {
        this.el = el;
        this.ngHelmetService = ngHelmetService;
        this.id = currentId++;
        this.elId = `ng-helmet-${this.id}`;
        this.destroy$ = new Subject();
    }
    ngAfterContentInit() {
        this.ngHelmetService.pushHelmet(this.id, buildHelmet(this.titles.get(0), this.metas.toArray()));
        combineLatest([
            this.titles.changes,
            this.metas.changes,
        ])
            .pipe(map(([titles, metas]) => buildHelmet(titles.get(0), metas.toArray())), takeUntil(this.destroy$))
            .subscribe((helmet) => this.ngHelmetService.pushHelmet(this.id, helmet));
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
        this.ngHelmetService.popHelmet();
    }
}
NgHelmetComponent.decorators = [
    { type: Component, args: [{
                selector: "ng-helmet",
                template: ``
            },] }
];
NgHelmetComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: NgHelmetService }
];
NgHelmetComponent.propDecorators = {
    elId: [{ type: HostBinding, args: ["id",] }],
    titles: [{ type: ContentChildren, args: [NgHelmetTitleComponent, {
                    read: ElementRef,
                    emitDistinctChangesOnly: true,
                },] }],
    metas: [{ type: ContentChildren, args: [NgHelmetMetaComponent, {
                    read: ElementRef,
                    emitDistinctChangesOnly: true,
                },] }]
};
//# sourceMappingURL=ng-helmet.component.js.map