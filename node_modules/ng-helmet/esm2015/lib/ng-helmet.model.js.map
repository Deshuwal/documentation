{"version":3,"file":"ng-helmet.model.js","sourceRoot":"","sources":["../../../../../packages/ng-helmet/src/lib/ng-helmet.model.ts"],"names":[],"mappings":"AAYA,MAAM,UAAU,WAAW,CACzB,OAAiD,EACjD,OAAsC;IAEtC,uCACK,CAAC,OAAO,IAAI,EAAE,KAAK,EAAE,OAAO,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC,KACrD,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE;YACtD,GAAG,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;YAC3B,OAAO,GAAG,CAAC;QACb,CAAC,EAAE,EAAqB,CAAC,IACzB;AACJ,CAAC;AAED,SAAS,gBAAgB,CAAC,EACxB,aAAa,EAAE,EAAE,GACW;IAC5B,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC;IACxC,MAAM,QAAQ,GAAG,EAAE,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;IAC7C,mEACK,CAAC,IAAI,IAAI,EAAE,IAAI,EAAE,CAAC,GAClB,CAAC,OAAO,IAAI,EAAE,OAAO,EAAE,CAAC,GACxB,CAAC,SAAS,IAAI,EAAE,SAAS,EAAE,CAAC,GAC5B,CAAC,QAAQ,IAAI,EAAE,QAAQ,EAAE,CAAC,EAC7B;AACJ,CAAC;AAED,SAAS,YAAY,CAAC,IAAoB;IACxC,IAAI,IAAI,CAAC,IAAI,EAAE;QACb,OAAO,SAAS,IAAI,CAAC,IAAI,GAAG,CAAC;KAC9B;SAAM,IAAI,IAAI,CAAC,QAAQ,EAAE;QACxB,OAAO,aAAa,IAAI,CAAC,QAAQ,GAAG,CAAC;KACtC;IACD,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;AACvE,CAAC","sourcesContent":["import { ElementRef } from \"@angular/core\";\nimport { MetaDefinition } from \"@angular/platform-browser\";\n\nexport type NgHelmet = Readonly<{\n  title?: string;\n  metas: MetaDefinitions;\n}>;\n\nexport type MetaDefinitions = {\n  [selector: string]: MetaDefinition;\n};\n\nexport function buildHelmet(\n  titleEl: ElementRef<HTMLTitleElement> | undefined,\n  metaEls: ElementRef<HTMLMetaElement>[]\n): NgHelmet {\n  return {\n    ...(titleEl && { title: titleEl.nativeElement.text }),\n    metas: metaEls.map(metaToDefinition).reduce((acc, el) => {\n      acc[attrSelector(el)] = el;\n      return acc;\n    }, {} as MetaDefinitions),\n  };\n}\n\nfunction metaToDefinition({\n  nativeElement: el,\n}: ElementRef<HTMLMetaElement>): MetaDefinition {\n  const { name, content, httpEquiv } = el;\n  const property = el.getAttribute(\"property\");\n  return {\n    ...(name && { name }),\n    ...(content && { content }),\n    ...(httpEquiv && { httpEquiv }),\n    ...(property && { property }),\n  };\n}\n\nfunction attrSelector(meta: MetaDefinition): string {\n  if (meta.name) {\n    return `name='${meta.name}'`;\n  } else if (meta.property) {\n    return `property='${meta.property}'`;\n  }\n  throw new Error(`MetaDefinition does not have 'name' or 'property'`);\n}\n"]}