{"version":3,"file":"ng-helmet.js","sources":["../../../../packages/ng-helmet/src/lib/ng-helmet-title.component.ts","../../../../packages/ng-helmet/src/lib/ng-helmet-meta.component.ts","../../../../packages/ng-helmet/src/lib/ng-helmet.model.ts","../../../../packages/ng-helmet/src/lib/ng-helmet.tokens.ts","../../../../packages/ng-helmet/src/lib/ng-helmet.service.ts","../../../../packages/ng-helmet/src/lib/ng-helmet.component.ts","../../../../packages/ng-helmet/src/lib/ng-helmet.module.ts","../../../../packages/ng-helmet/src/ng-helmet.ts"],"sourcesContent":["import { ChangeDetectionStrategy, Component } from \"@angular/core\";\n\n@Component({\n  selector: \"ng-helmet > title\",\n  template: `<ng-content></ng-content>`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NgHelmetTitleComponent {}\n","import { ChangeDetectionStrategy, Component } from \"@angular/core\";\n\n@Component({\n  selector: \"ng-helmet > meta\",\n  template: \"\",\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NgHelmetMetaComponent {}\n","import { ElementRef } from \"@angular/core\";\nimport { MetaDefinition } from \"@angular/platform-browser\";\n\nexport type NgHelmet = Readonly<{\n  title?: string;\n  metas: MetaDefinitions;\n}>;\n\nexport type MetaDefinitions = {\n  [selector: string]: MetaDefinition;\n};\n\nexport function buildHelmet(\n  titleEl: ElementRef<HTMLTitleElement> | undefined,\n  metaEls: ElementRef<HTMLMetaElement>[]\n): NgHelmet {\n  return {\n    ...(titleEl && { title: titleEl.nativeElement.text }),\n    metas: metaEls.map(metaToDefinition).reduce((acc, el) => {\n      acc[attrSelector(el)] = el;\n      return acc;\n    }, {} as MetaDefinitions),\n  };\n}\n\nfunction metaToDefinition({\n  nativeElement: el,\n}: ElementRef<HTMLMetaElement>): MetaDefinition {\n  const { name, content, httpEquiv } = el;\n  const property = el.getAttribute(\"property\");\n  return {\n    ...(name && { name }),\n    ...(content && { content }),\n    ...(httpEquiv && { httpEquiv }),\n    ...(property && { property }),\n  };\n}\n\nfunction attrSelector(meta: MetaDefinition): string {\n  if (meta.name) {\n    return `name='${meta.name}'`;\n  } else if (meta.property) {\n    return `property='${meta.property}'`;\n  }\n  throw new Error(`MetaDefinition does not have 'name' or 'property'`);\n}\n","import { InjectionToken } from \"@angular/core\";\nimport { NgHelmetConfig } from \"./ng-helmet.config\";\n\nexport const NG_HELMET_CONFIG_TOKEN = new InjectionToken<NgHelmetConfig>(\n  \"ng-helmet.config\"\n);\n","import { Inject, Injectable, Optional } from \"@angular/core\";\nimport { Meta, Title } from \"@angular/platform-browser\";\nimport { NgHelmetConfig } from \"./ng-helmet.config\";\nimport { NgHelmet, MetaDefinitions } from \"./ng-helmet.model\";\nimport { NG_HELMET_CONFIG_TOKEN } from \"./ng-helmet.tokens\";\n\ntype HelmetStack = { readonly id: number; helmet: NgHelmet }[];\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class NgHelmetService {\n  constructor(\n    private readonly title: Title,\n    private readonly meta: Meta,\n    @Optional()\n    @Inject(NG_HELMET_CONFIG_TOKEN)\n    private readonly config?: NgHelmetConfig\n  ) {}\n\n  private readonly helmetStack: HelmetStack = [];\n\n  /**\n   * Push a new helmet on to the helmetStack and update the document head.\n   * If the helmet id already exists in the stack (i.e. the ng-helmet content\n   * was updated), this method simply updates the helmet at the existing position.\n   * @param id The id of the NgHelmetComponent this helmet comes from.\n   * @param helmet the NgHelmet data harvested from the component.\n   */\n  pushHelmet(id: number, helmet: NgHelmet): void {\n    const index = this.helmetStack.findIndex((e) => e.id === id);\n    if (index === -1) {\n      this.helmetStack.push({ id, helmet });\n    } else {\n      this.helmetStack[index].helmet = helmet;\n    }\n    this.applyHelmet(this.computeHelmet());\n  }\n\n  /**\n   * Pop the top element off the helmetStack and update the document head.\n   */\n  popHelmet(): void {\n    const top = this.helmetStack.pop();\n    if (top) {\n      // Drop the content attribute from all top metas so they get cleared.\n      const topMetas = top.helmet.metas;\n      Object.keys(topMetas).forEach((selector) => {\n        const { content: _, ...rest } = topMetas[selector];\n        topMetas[selector] = rest;\n      });\n\n      // Merge top metas to clear with new computed metas.\n      const { title, metas } = this.computeHelmet();\n      this.applyHelmet({ title, metas: { ...topMetas, ...metas } });\n    } else {\n      throw new Error(`popped an empty helmetStack`);\n    }\n  }\n\n  /**\n   * Compute the current helmet from the stack.\n   * @returns The current helmet.\n   */\n  private computeHelmet(): NgHelmet {\n    if (this.helmetStack.length > 0) {\n      return this.helmetStack\n        .map((e) => e.helmet)\n        .reduce((acc, el) => ({\n          title: el.title ?? acc.title,\n          metas: { ...acc.metas, ...el.metas },\n        }));\n    }\n    return { metas: {} };\n  }\n\n  /**\n   * Apply the given helmet to the document header.\n   * @param helmet The helmet to apply.\n   */\n  private applyHelmet(helmet: NgHelmet): void {\n    if (helmet.title) {\n      const baseTitle = this.config?.baseTitle;\n      const title = baseTitle ? `${helmet.title} ${baseTitle}` : helmet.title;\n      this.title.setTitle(title);\n    }\n    this.applyMetaDefinitions(helmet.metas);\n  }\n\n  /**\n   * Apply the MetaDefinitions to the document head.\n   * If the MetaDefinition has no content, this method will remove the\n   * corresponding tag.\n   * @param metas The MetaDefinitions to apply to the document.\n   */\n  private applyMetaDefinitions(metas: MetaDefinitions): void {\n    Object.keys(metas).forEach((selector) => {\n      const tag = metas[selector];\n      if (!tag.content) {\n        this.meta.removeTag(selector);\n      } else if (this.meta.getTag(selector)) {\n        this.meta.updateTag(tag);\n      } else {\n        this.meta.addTag(tag);\n      }\n    });\n  }\n}\n","import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  HostBinding,\n  OnDestroy,\n  QueryList,\n} from \"@angular/core\";\nimport { NgHelmetTitleComponent } from \"./ng-helmet-title.component\";\nimport { NgHelmetMetaComponent } from \"./ng-helmet-meta.component\";\nimport { buildHelmet } from \"./ng-helmet.model\";\nimport { NgHelmetService } from \"./ng-helmet.service\";\nimport { combineLatest, Observable, Subject } from \"rxjs\";\nimport { map, takeUntil } from \"rxjs/operators\";\n\nlet currentId = 0;\n\n@Component({\n  selector: \"ng-helmet\",\n  template: ``,\n})\nexport class NgHelmetComponent implements AfterContentInit, OnDestroy {\n  constructor(\n    private readonly el: ElementRef<HTMLElement>,\n    private readonly ngHelmetService: NgHelmetService\n  ) {}\n\n  private readonly id = currentId++;\n\n  @HostBinding(\"id\")\n  readonly elId = `ng-helmet-${this.id}`;\n\n  @ContentChildren(NgHelmetTitleComponent, {\n    read: ElementRef,\n    emitDistinctChangesOnly: true,\n  })\n  readonly titles!: QueryList<ElementRef<HTMLTitleElement>>;\n\n  @ContentChildren(NgHelmetMetaComponent, {\n    read: ElementRef,\n    emitDistinctChangesOnly: true,\n  })\n  readonly metas!: QueryList<ElementRef<HTMLMetaElement>>;\n\n  private readonly destroy$ = new Subject<void>();\n\n  ngAfterContentInit(): void {\n    this.ngHelmetService.pushHelmet(\n      this.id,\n      buildHelmet(this.titles.get(0), this.metas.toArray())\n    );\n    combineLatest([\n      this.titles.changes as Observable<\n        QueryList<ElementRef<HTMLTitleElement>>\n      >,\n      this.metas.changes as Observable<QueryList<ElementRef<HTMLMetaElement>>>,\n    ])\n      .pipe(\n        map(([titles, metas]) => buildHelmet(titles.get(0), metas.toArray())),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((helmet) => this.ngHelmetService.pushHelmet(this.id, helmet));\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n    this.ngHelmetService.popHelmet();\n  }\n}\n","import { ModuleWithProviders, NgModule } from \"@angular/core\";\nimport { NgHelmetComponent } from \"./ng-helmet.component\";\nimport { NgHelmetTitleComponent } from \"./ng-helmet-title.component\";\nimport { NgHelmetMetaComponent } from \"./ng-helmet-meta.component\";\nimport { NgHelmetConfig } from \"./ng-helmet.config\";\nimport { NG_HELMET_CONFIG_TOKEN } from \"./ng-helmet.tokens\";\n\nconst components = [\n  NgHelmetComponent,\n  NgHelmetTitleComponent,\n  NgHelmetMetaComponent,\n];\n\n@NgModule({\n  declarations: components,\n  exports: components,\n})\nexport class NgHelmetModule {\n  static forRoot(config: NgHelmetConfig): ModuleWithProviders<NgHelmetModule> {\n    return {\n      ngModule: NgHelmetModule,\n      providers: [{ provide: NG_HELMET_CONFIG_TOKEN, useValue: config }],\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {NgHelmetConfig as ɵc} from './lib/ng-helmet.config';\nexport {NgHelmetService as ɵa} from './lib/ng-helmet.service';\nexport {NG_HELMET_CONFIG_TOKEN as ɵb} from './lib/ng-helmet.tokens';"],"names":[],"mappings":"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"}