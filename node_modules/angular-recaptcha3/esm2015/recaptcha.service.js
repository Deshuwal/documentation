import { Injectable, NgZone, Optional, SkipSelf } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
/*
 * Common service shared by all reCaptcha component instances
 * through dependency injection.
 * This service has the task of loading the reCaptcha API once for all.
 * Only the first instance of the component creates the service, subsequent
 * components will use the existing instance.
 *
 * As the language is passed to the <script>, the first component
 * determines the language of all subsequent components. This is a limitation
 * of the present Google API.
 */
export class ReCaptchaService {
    constructor(zone) {
        this.scriptLoaded = false;
        this.readySubject = new BehaviorSubject(false);
        /* the callback needs to exist before the API is loaded */
        if (typeof window !== 'undefined') {
            window['reCaptchaOnloadCallback'] = (() => {
                zone.run(this.onloadCallback.bind(this));
            });
        }
    }
    getReady(language) {
        if (!this.scriptLoaded) {
            this.scriptLoaded = true;
            let doc = document.body;
            let script = document.createElement('script');
            script.innerHTML = '';
            script.src = 'https://www.google.com/recaptcha/api.js?onload=reCaptchaOnloadCallback&render=explicit' +
                (language ? '&hl=' + language : '');
            script.async = true;
            script.defer = true;
            doc.appendChild(script);
        }
        return this.readySubject.asObservable();
    }
    execute(options = undefined) {
        const captcha = window.grecaptcha;
        const captchaElement = document.querySelector('.g-recaptcha.invisible');
        return captcha.execute(captchaElement.id, options);
    }
    onloadCallback() {
        this.readySubject.next(true);
    }
}
ReCaptchaService.decorators = [
    { type: Injectable }
];
ReCaptchaService.ctorParameters = () => [
    { type: NgZone }
];
/* singleton pattern taken from https://github.com/angular/angular/issues/13854 */
export function RECAPTCHA_SERVICE_PROVIDER_FACTORY(ngZone, parentDispatcher) {
    return parentDispatcher || new ReCaptchaService(ngZone);
}
export const RECAPTCHA_SERVICE_PROVIDER = {
    provide: ReCaptchaService,
    deps: [NgZone, [new Optional(), new SkipSelf(), ReCaptchaService]],
    useFactory: RECAPTCHA_SERVICE_PROVIDER_FACTORY
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjYXB0Y2hhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcmVjYXB0Y2hhLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2RSxPQUFPLEVBQUUsZUFBZSxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBRW5EOzs7Ozs7Ozs7O0dBVUc7QUFJSCxNQUFNLE9BQU8sZ0JBQWdCO0lBS3pCLFlBQVksSUFBWTtRQUhoQixpQkFBWSxHQUFHLEtBQUssQ0FBQztRQUNyQixpQkFBWSxHQUE2QixJQUFJLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUd4RSwwREFBMEQ7UUFDMUQsSUFBSSxPQUFPLE1BQU0sS0FBSyxXQUFXLEVBQUU7WUFDL0IsTUFBTSxDQUFNLHlCQUF5QixDQUFDLEdBQVEsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2hELElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUM3QyxDQUFDLENBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQztJQUVNLFFBQVEsQ0FBQyxRQUFnQjtRQUMzQixJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztZQUN6QixJQUFJLEdBQUcsR0FBbUIsUUFBUSxDQUFDLElBQUksQ0FBQztZQUN4QyxJQUFJLE1BQU0sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzlDLE1BQU0sQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1lBQ3RCLE1BQU0sQ0FBQyxHQUFHLEdBQUcsd0ZBQXdGO2dCQUNqRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDeEMsTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7WUFDcEIsTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7WUFDcEIsR0FBRyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUMzQjtRQUVELE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUM1QyxDQUFDO0lBRU0sT0FBTyxDQUFDLFVBQWUsU0FBUztRQUNuQyxNQUFNLE9BQU8sR0FBUyxNQUFPLENBQUMsVUFBVSxDQUFDO1FBQ3pDLE1BQU0sY0FBYyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUV4RSxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRU8sY0FBYztRQUNsQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqQyxDQUFDOzs7WUF4Q0osVUFBVTs7O1lBaEJVLE1BQU07O0FBMkQzQixrRkFBa0Y7QUFDbEYsTUFBTSxVQUFVLGtDQUFrQyxDQUFDLE1BQWMsRUFBRSxnQkFBa0M7SUFDakcsT0FBTyxnQkFBZ0IsSUFBSSxJQUFJLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzVELENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRztJQUN0QyxPQUFPLEVBQUUsZ0JBQWdCO0lBQ3pCLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksUUFBUSxFQUFFLEVBQUUsSUFBSSxRQUFRLEVBQUUsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ2xFLFVBQVUsRUFBRSxrQ0FBa0M7Q0FDakQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE5nWm9uZSwgT3B0aW9uYWwsIFNraXBTZWxmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5cclxuLypcclxuICogQ29tbW9uIHNlcnZpY2Ugc2hhcmVkIGJ5IGFsbCByZUNhcHRjaGEgY29tcG9uZW50IGluc3RhbmNlc1xyXG4gKiB0aHJvdWdoIGRlcGVuZGVuY3kgaW5qZWN0aW9uLlxyXG4gKiBUaGlzIHNlcnZpY2UgaGFzIHRoZSB0YXNrIG9mIGxvYWRpbmcgdGhlIHJlQ2FwdGNoYSBBUEkgb25jZSBmb3IgYWxsLlxyXG4gKiBPbmx5IHRoZSBmaXJzdCBpbnN0YW5jZSBvZiB0aGUgY29tcG9uZW50IGNyZWF0ZXMgdGhlIHNlcnZpY2UsIHN1YnNlcXVlbnRcclxuICogY29tcG9uZW50cyB3aWxsIHVzZSB0aGUgZXhpc3RpbmcgaW5zdGFuY2UuXHJcbiAqXHJcbiAqIEFzIHRoZSBsYW5ndWFnZSBpcyBwYXNzZWQgdG8gdGhlIDxzY3JpcHQ+LCB0aGUgZmlyc3QgY29tcG9uZW50XHJcbiAqIGRldGVybWluZXMgdGhlIGxhbmd1YWdlIG9mIGFsbCBzdWJzZXF1ZW50IGNvbXBvbmVudHMuIFRoaXMgaXMgYSBsaW1pdGF0aW9uXHJcbiAqIG9mIHRoZSBwcmVzZW50IEdvb2dsZSBBUEkuXHJcbiAqL1xyXG5cclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFJlQ2FwdGNoYVNlcnZpY2Uge1xyXG5cclxuICAgIHByaXZhdGUgc2NyaXB0TG9hZGVkID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIHJlYWR5U3ViamVjdDogQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+ID0gbmV3IEJlaGF2aW9yU3ViamVjdChmYWxzZSk7XHJcblxyXG4gICAgY29uc3RydWN0b3Ioem9uZTogTmdab25lKSB7XHJcbiAgICAgICAgLyogdGhlIGNhbGxiYWNrIG5lZWRzIHRvIGV4aXN0IGJlZm9yZSB0aGUgQVBJIGlzIGxvYWRlZCAqL1xyXG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICB3aW5kb3dbPGFueT4ncmVDYXB0Y2hhT25sb2FkQ2FsbGJhY2snXSA9IDxhbnk+KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHpvbmUucnVuKHRoaXMub25sb2FkQ2FsbGJhY2suYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0UmVhZHkobGFuZ3VhZ2U6IHN0cmluZyk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xyXG4gICAgICAgICBpZiAoIXRoaXMuc2NyaXB0TG9hZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2NyaXB0TG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgbGV0IGRvYyA9IDxIVE1MRGl2RWxlbWVudD5kb2N1bWVudC5ib2R5O1xyXG4gICAgICAgICAgICBsZXQgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XHJcbiAgICAgICAgICAgIHNjcmlwdC5pbm5lckhUTUwgPSAnJztcclxuICAgICAgICAgICAgc2NyaXB0LnNyYyA9ICdodHRwczovL3d3dy5nb29nbGUuY29tL3JlY2FwdGNoYS9hcGkuanM/b25sb2FkPXJlQ2FwdGNoYU9ubG9hZENhbGxiYWNrJnJlbmRlcj1leHBsaWNpdCcgK1xyXG4gICAgICAgICAgICAgICAgKGxhbmd1YWdlID8gJyZobD0nICsgbGFuZ3VhZ2UgOiAnJyk7XHJcbiAgICAgICAgICAgIHNjcmlwdC5hc3luYyA9IHRydWU7XHJcbiAgICAgICAgICAgIHNjcmlwdC5kZWZlciA9IHRydWU7XHJcbiAgICAgICAgICAgIGRvYy5hcHBlbmRDaGlsZChzY3JpcHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhZHlTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBleGVjdXRlKG9wdGlvbnM6IGFueSA9IHVuZGVmaW5lZCk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICAgICAgY29uc3QgY2FwdGNoYSA9ICg8YW55PndpbmRvdykuZ3JlY2FwdGNoYTtcclxuICAgICAgICBjb25zdCBjYXB0Y2hhRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5nLXJlY2FwdGNoYS5pbnZpc2libGUnKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNhcHRjaGEuZXhlY3V0ZShjYXB0Y2hhRWxlbWVudC5pZCwgb3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbmxvYWRDYWxsYmFjaygpIHtcclxuICAgICAgICB0aGlzLnJlYWR5U3ViamVjdC5uZXh0KHRydWUpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKiBzaW5nbGV0b24gcGF0dGVybiB0YWtlbiBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvaXNzdWVzLzEzODU0ICovXHJcbmV4cG9ydCBmdW5jdGlvbiBSRUNBUFRDSEFfU0VSVklDRV9QUk9WSURFUl9GQUNUT1JZKG5nWm9uZTogTmdab25lLCBwYXJlbnREaXNwYXRjaGVyOiBSZUNhcHRjaGFTZXJ2aWNlKSB7XHJcbiAgICByZXR1cm4gcGFyZW50RGlzcGF0Y2hlciB8fCBuZXcgUmVDYXB0Y2hhU2VydmljZShuZ1pvbmUpO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgUkVDQVBUQ0hBX1NFUlZJQ0VfUFJPVklERVIgPSB7XHJcbiAgICBwcm92aWRlOiBSZUNhcHRjaGFTZXJ2aWNlLFxyXG4gICAgZGVwczogW05nWm9uZSwgW25ldyBPcHRpb25hbCgpLCBuZXcgU2tpcFNlbGYoKSwgUmVDYXB0Y2hhU2VydmljZV1dLFxyXG4gICAgdXNlRmFjdG9yeTogUkVDQVBUQ0hBX1NFUlZJQ0VfUFJPVklERVJfRkFDVE9SWVxyXG59O1xyXG4iXX0=