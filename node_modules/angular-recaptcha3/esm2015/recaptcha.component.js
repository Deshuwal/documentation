import { Component, EventEmitter, forwardRef, Inject, Injectable, Input, NgZone, Output, ViewChild, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { RECAPTCHA_OPTION } from './recaptch.tokens';
import { ReCaptchaService } from './recaptcha.service';
export class ReCaptchaComponent {
    constructor(_zone, _captchaService, option) {
        this._zone = _zone;
        this._captchaService = _captchaService;
        this.option = option;
        this.hide = true;
        this.captchaResponse = new EventEmitter();
        this.captchaExpired = new EventEmitter();
        this.widgetId = null;
        this.ngUnsubscribe = new Subject();
        this.onChange = () => { };
        this.onTouched = () => { };
        option = option || {
            language: 'ru',
            invisible: {
                sitekey: this.sitekey || undefined,
                theme: 'light',
                type: 'image',
                tabindex: 0,
                badge: 'bottomright'
            },
        };
    }
    ngAfterViewInit() {
        this.setWidgetId();
    }
    reset() {
        if (this.widgetId === null) {
            return;
        }
        this.grecaptchaReset();
        this.onChange(null);
    }
    setWidgetId() {
        this._captchaService.getReady(this.language || this.option.language)
            .pipe(takeUntil(this.ngUnsubscribe))
            .subscribe((ready) => {
            if (!ready) {
                return;
            }
            this.widgetId = this.render(this.targetRef.nativeElement);
        });
    }
    render(target) {
        return window.grecaptcha.render(target, {
            'sitekey': this.getSiteKey(),
            'badge': this.getBadge(),
            'theme': this.getTheme(),
            'type': this.getType(),
            'tabindex': this.getTabindex(),
            'size': this.size || 'invisible',
            'callback': ((response) => this._zone.run(this.recaptchaCallback.bind(this, response))),
            'expired-callback': (() => this._zone.run(this.recaptchaExpiredCallback.bind(this)))
        });
    }
    execute(options = undefined) {
        if (this.size !== 'invisible') {
            return;
        }
        if (this.widgetId === null) {
            throw new Error('Invalid widgetId');
        }
        return window.grecaptcha.execute(this.widgetId, options);
    }
    getResponse() {
        if (this.widgetId === null) {
            throw new Error('Invalid widgetId');
        }
        return window.grecaptcha.getResponse(this.widgetId);
    }
    writeValue(newValue) {
        /* ignore it */
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    ngOnDestroy() {
        this.grecaptchaReset();
        this.ngUnsubscribe.next();
        this.ngUnsubscribe.complete();
    }
    recaptchaCallback(response) {
        this.onChange(response);
        this.onTouched();
        this.captchaResponse.emit(response);
    }
    recaptchaExpiredCallback() {
        this.onChange(null);
        this.onTouched();
        this.captchaExpired.emit();
    }
    grecaptchaReset() {
        if (this.widgetId != null) {
            this._zone.runOutsideAngular(() => window.grecaptcha.reset(this.widgetId));
        }
    }
    getSiteKey() {
        if (this.sitekey) {
            return this.sitekey;
        }
        if (this.size === 'invisible') {
            return this.option.invisible.sitekey;
        }
        if (this.size === 'normal') {
            return this.option.normal.sitekey;
        }
        throw new Error('Invalid sitekey');
    }
    getBadge() {
        if (this.badge) {
            return this.badge;
        }
        if (this.size === 'invisible') {
            return this.option.invisible.badge;
        }
        if (this.size === 'normal') {
            return this.option.normal.badge;
        }
        return 'bottomright';
    }
    getTheme() {
        if (this.theme) {
            return this.theme;
        }
        if (this.size === 'invisible') {
            return this.option.invisible.theme;
        }
        if (this.size === 'normal') {
            return this.option.normal.theme;
        }
        return 'light';
    }
    getType() {
        if (this.type) {
            return this.type;
        }
        if (this.size === 'invisible') {
            return this.option.invisible.type;
        }
        if (this.size === 'normal') {
            return this.option.normal.type;
        }
        return 'image';
    }
    getTabindex() {
        if (this.tabindex) {
            return this.tabindex;
        }
        if (this.size === 'invisible') {
            return this.option.invisible.tabindex;
        }
        if (this.size === 'normal') {
            return this.option.normal.tabindex;
        }
        return 0;
    }
}
ReCaptchaComponent.decorators = [
    { type: Component, args: [{
                selector: 'recaptcha',
                template: `
        <div #target
            [ngClass]="{'hide': hide}"
            [class]="'recaptcha g-recaptcha ' + (size || 'invisible')"
            [id]="widgetId">
        </div>
    `,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => ReCaptchaComponent),
                        multi: true
                    }
                ],
                styles: [`
        .hide {
            display: none;
        }
    `]
            },] },
    { type: Injectable }
];
ReCaptchaComponent.ctorParameters = () => [
    { type: NgZone },
    { type: ReCaptchaService },
    { type: undefined, decorators: [{ type: Inject, args: [RECAPTCHA_OPTION,] }] }
];
ReCaptchaComponent.propDecorators = {
    sitekey: [{ type: Input }],
    size: [{ type: Input }],
    theme: [{ type: Input }],
    type: [{ type: Input }],
    tabindex: [{ type: Input }],
    badge: [{ type: Input }],
    language: [{ type: Input }],
    hide: [{ type: Input }],
    captchaResponse: [{ type: Output }],
    captchaExpired: [{ type: Output }],
    targetRef: [{ type: ViewChild, args: ['target',] }]
};
//# sourceMappingURL=data:application/json;base64,