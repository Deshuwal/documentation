{"version":3,"file":"angular-recaptcha3.js","sources":["../../src/recaptch.tokens.ts","../../src/recaptcha.service.ts","../../src/recaptcha.component.ts","../../src/recaptcha.module.ts","../../src/angular-recaptcha3.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\r\n\r\nimport { IRecaptchaOptionType } from './models/recaptcha-option-type.interface';\r\n\r\nexport const RECAPTCHA_OPTION = new InjectionToken<IRecaptchaOptionType>('RECAPTCHA_OPTION');\r\n","import { Injectable, NgZone, Optional, SkipSelf } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n/*\r\n * Common service shared by all reCaptcha component instances\r\n * through dependency injection.\r\n * This service has the task of loading the reCaptcha API once for all.\r\n * Only the first instance of the component creates the service, subsequent\r\n * components will use the existing instance.\r\n *\r\n * As the language is passed to the <script>, the first component\r\n * determines the language of all subsequent components. This is a limitation\r\n * of the present Google API.\r\n */\r\n\r\n\r\n@Injectable()\r\nexport class ReCaptchaService {\r\n\r\n    private scriptLoaded = false;\r\n    private readySubject: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n    constructor(zone: NgZone) {\r\n        /* the callback needs to exist before the API is loaded */\r\n        if (typeof window !== 'undefined') {\r\n            window[<any>'reCaptchaOnloadCallback'] = <any>(() => {\r\n                zone.run(this.onloadCallback.bind(this));\r\n            });\r\n        }\r\n    }\r\n\r\n    public getReady(language: string): Observable<boolean> {\r\n         if (!this.scriptLoaded) {\r\n            this.scriptLoaded = true;\r\n            let doc = <HTMLDivElement>document.body;\r\n            let script = document.createElement('script');\r\n            script.innerHTML = '';\r\n            script.src = 'https://www.google.com/recaptcha/api.js?onload=reCaptchaOnloadCallback&render=explicit' +\r\n                (language ? '&hl=' + language : '');\r\n            script.async = true;\r\n            script.defer = true;\r\n            doc.appendChild(script);\r\n        }\r\n\r\n        return this.readySubject.asObservable();\r\n    }\r\n\r\n    public execute(options: any = undefined): Promise<string> {\r\n        const captcha = (<any>window).grecaptcha;\r\n        const captchaElement = document.querySelector('.g-recaptcha.invisible');\r\n\r\n        return captcha.execute(captchaElement.id, options);\r\n    }\r\n\r\n    private onloadCallback() {\r\n        this.readySubject.next(true);\r\n    }\r\n}\r\n\r\n/* singleton pattern taken from https://github.com/angular/angular/issues/13854 */\r\nexport function RECAPTCHA_SERVICE_PROVIDER_FACTORY(ngZone: NgZone, parentDispatcher: ReCaptchaService) {\r\n    return parentDispatcher || new ReCaptchaService(ngZone);\r\n}\r\n\r\nexport const RECAPTCHA_SERVICE_PROVIDER = {\r\n    provide: ReCaptchaService,\r\n    deps: [NgZone, [new Optional(), new SkipSelf(), ReCaptchaService]],\r\n    useFactory: RECAPTCHA_SERVICE_PROVIDER_FACTORY\r\n};\r\n","import {\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    forwardRef,\r\n    Inject,\r\n    Injectable,\r\n    Input,\r\n    NgZone,\r\n    Output,\r\n    ViewChild,\r\n    AfterViewInit,\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\nimport { IRecaptchaOptionType } from './models/recaptcha-option-type.interface';\r\nimport { RECAPTCHA_OPTION } from './recaptch.tokens';\r\nimport { ReCaptchaService } from './recaptcha.service';\r\n\r\n@Component({\r\n    selector: 'recaptcha',\r\n    template: `\r\n        <div #target\r\n            [ngClass]=\"{'hide': hide}\"\r\n            [class]=\"'recaptcha g-recaptcha ' + (size || 'invisible')\"\r\n            [id]=\"widgetId\">\r\n        </div>\r\n    `,\r\n    styles: [`\r\n        .hide {\r\n            display: none;\r\n        }\r\n    `],\r\n    providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef(() => ReCaptchaComponent),\r\n            multi: true\r\n        }\r\n    ]\r\n})\r\n@Injectable()\r\nexport class ReCaptchaComponent implements AfterViewInit, ControlValueAccessor {\r\n    @Input() sitekey: string;\r\n    @Input() size: string;\r\n    @Input() theme: string;\r\n    @Input() type: string;\r\n    @Input() tabindex: number;\r\n    @Input() badge: string;\r\n    @Input() language: string;\r\n    @Input() hide: boolean = true;\r\n\r\n    @Output() captchaResponse = new EventEmitter<string>();\r\n    @Output() captchaExpired = new EventEmitter();\r\n\r\n    @ViewChild('target') targetRef: ElementRef;\r\n    widgetId: any = null;\r\n\r\n    private ngUnsubscribe: Subject<void> = new Subject<void>();\r\n\r\n    onChange: Function = () => {};\r\n    onTouched: Function = () => {};\r\n\r\n    constructor(\r\n        private _zone: NgZone,\r\n        private _captchaService: ReCaptchaService,\r\n\r\n        @Inject(RECAPTCHA_OPTION) private option: IRecaptchaOptionType,\r\n    ) {\r\n        option = option || {\r\n            language: 'ru',\r\n            invisible: {\r\n                sitekey: this.sitekey || undefined,\r\n                theme: 'light',\r\n                type: 'image',\r\n                tabindex: 0,\r\n                badge: 'bottomright'\r\n            },\r\n        };\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.setWidgetId();\r\n    }\r\n\r\n    public reset() {\r\n        if (this.widgetId === null) {\r\n            return;\r\n        }\r\n        this.grecaptchaReset();\r\n        this.onChange(null);\r\n    }\r\n\r\n    public setWidgetId() {\r\n        this._captchaService.getReady(this.language || this.option.language)\r\n            .pipe(\r\n                takeUntil(this.ngUnsubscribe)\r\n            )\r\n            .subscribe((ready) => {\r\n                if (!ready) {\r\n                    return;\r\n                }\r\n                this.widgetId = this.render(this.targetRef.nativeElement);\r\n            });\r\n    }\r\n\r\n    public render(target) {\r\n        return (<any>window).grecaptcha.render(target, {\r\n            'sitekey': this.getSiteKey(),\r\n            'badge': this.getBadge(),\r\n            'theme': this.getTheme(),\r\n            'type': this.getType(),\r\n            'tabindex': this.getTabindex(),\r\n            'size': this.size || 'invisible',\r\n            'callback': <any>((response: any) => this._zone.run(this.recaptchaCallback.bind(this, response))),\r\n            'expired-callback': <any>(() => this._zone.run(this.recaptchaExpiredCallback.bind(this)))\r\n        });\r\n    }\r\n\r\n    public execute(options: any = undefined) {\r\n        if (this.size !== 'invisible') {\r\n            return;\r\n        }\r\n\r\n        if (this.widgetId === null) {\r\n            throw new Error('Invalid widgetId');\r\n        }\r\n        return (<any>window).grecaptcha.execute(this.widgetId, options);\r\n    }\r\n\r\n    public getResponse(): string {\r\n        if (this.widgetId === null) {\r\n            throw new Error('Invalid widgetId');\r\n        }\r\n        return (<any>window).grecaptcha.getResponse(this.widgetId);\r\n    }\r\n\r\n    writeValue(newValue: any): void {\r\n        /* ignore it */\r\n    }\r\n\r\n    registerOnChange(fn: any): void {\r\n        this.onChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: any): void {\r\n        this.onTouched = fn;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.grecaptchaReset();\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n\r\n    private recaptchaCallback(response: string) {\r\n        this.onChange(response);\r\n        this.onTouched();\r\n        this.captchaResponse.emit(response);\r\n    }\r\n\r\n    private recaptchaExpiredCallback() {\r\n        this.onChange(null);\r\n        this.onTouched();\r\n        this.captchaExpired.emit();\r\n    }\r\n\r\n    private grecaptchaReset() {\r\n        if (this.widgetId != null) {\r\n          this._zone.runOutsideAngular(() => (<any>window).grecaptcha.reset(this.widgetId));\r\n        }\r\n    }\r\n\r\n    private getSiteKey() {\r\n        if (this.sitekey) {\r\n            return this.sitekey;\r\n        }\r\n\r\n        if (this.size === 'invisible') {\r\n            return this.option.invisible.sitekey;\r\n        }\r\n\r\n        if (this.size === 'normal') {\r\n            return this.option.normal.sitekey;\r\n        }\r\n\r\n        throw new Error('Invalid sitekey');\r\n    }\r\n\r\n    private getBadge() {\r\n        if (this.badge) {\r\n            return this.badge;\r\n        }\r\n\r\n        if (this.size === 'invisible') {\r\n            return this.option.invisible.badge;\r\n        }\r\n\r\n        if (this.size === 'normal') {\r\n            return this.option.normal.badge;\r\n        }\r\n\r\n        return 'bottomright';\r\n    }\r\n\r\n    private getTheme() {\r\n        if (this.theme) {\r\n            return this.theme;\r\n        }\r\n\r\n        if (this.size === 'invisible') {\r\n            return this.option.invisible.theme;\r\n        }\r\n\r\n        if (this.size === 'normal') {\r\n            return this.option.normal.theme;\r\n        }\r\n\r\n        return 'light';\r\n    }\r\n\r\n    private getType() {\r\n        if (this.type) {\r\n            return this.type;\r\n        }\r\n\r\n        if (this.size === 'invisible') {\r\n            return this.option.invisible.type;\r\n        }\r\n\r\n        if (this.size === 'normal') {\r\n            return this.option.normal.type;\r\n        }\r\n\r\n        return 'image';\r\n    }\r\n\r\n    private getTabindex() {\r\n        if (this.tabindex) {\r\n            return this.tabindex;\r\n        }\r\n\r\n        if (this.size === 'invisible') {\r\n            return this.option.invisible.tabindex;\r\n        }\r\n\r\n        if (this.size === 'normal') {\r\n            return this.option.normal.tabindex;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { ModuleWithProviders, NgModule } from '@angular/core';\r\n\r\nimport { IRecaptchaOptionType } from './models/recaptcha-option-type.interface';\r\nimport { RECAPTCHA_OPTION } from './recaptch.tokens';\r\nimport { ReCaptchaComponent } from './recaptcha.component';\r\nimport { RECAPTCHA_SERVICE_PROVIDER } from './recaptcha.service';\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    declarations: [ReCaptchaComponent],\r\n    exports: [ReCaptchaComponent],\r\n    providers: [RECAPTCHA_SERVICE_PROVIDER]\r\n})\r\n\r\nexport class ReCaptchaModule {\r\n    static forRoot(option: IRecaptchaOptionType = undefined): ModuleWithProviders<ReCaptchaModule> {\r\n        return {\r\n            ngModule: ReCaptchaModule,\r\n            providers: [\r\n                {\r\n                    provide: RECAPTCHA_OPTION,\r\n                    useValue: option\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}