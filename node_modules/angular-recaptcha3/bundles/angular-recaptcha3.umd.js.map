{"version":3,"file":"angular-recaptcha3.umd.js","sources":["../../src/recaptch.tokens.ts","../../src/recaptcha.service.ts","../../src/recaptcha.component.ts","../../src/recaptcha.module.ts","../../src/angular-recaptcha3.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\r\n\r\nimport { IRecaptchaOptionType } from './models/recaptcha-option-type.interface';\r\n\r\nexport const RECAPTCHA_OPTION = new InjectionToken<IRecaptchaOptionType>('RECAPTCHA_OPTION');\r\n","import { Injectable, NgZone, Optional, SkipSelf } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n/*\r\n * Common service shared by all reCaptcha component instances\r\n * through dependency injection.\r\n * This service has the task of loading the reCaptcha API once for all.\r\n * Only the first instance of the component creates the service, subsequent\r\n * components will use the existing instance.\r\n *\r\n * As the language is passed to the <script>, the first component\r\n * determines the language of all subsequent components. This is a limitation\r\n * of the present Google API.\r\n */\r\n\r\n\r\n@Injectable()\r\nexport class ReCaptchaService {\r\n\r\n    private scriptLoaded = false;\r\n    private readySubject: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n    constructor(zone: NgZone) {\r\n        /* the callback needs to exist before the API is loaded */\r\n        if (typeof window !== 'undefined') {\r\n            window[<any>'reCaptchaOnloadCallback'] = <any>(() => {\r\n                zone.run(this.onloadCallback.bind(this));\r\n            });\r\n        }\r\n    }\r\n\r\n    public getReady(language: string): Observable<boolean> {\r\n         if (!this.scriptLoaded) {\r\n            this.scriptLoaded = true;\r\n            let doc = <HTMLDivElement>document.body;\r\n            let script = document.createElement('script');\r\n            script.innerHTML = '';\r\n            script.src = 'https://www.google.com/recaptcha/api.js?onload=reCaptchaOnloadCallback&render=explicit' +\r\n                (language ? '&hl=' + language : '');\r\n            script.async = true;\r\n            script.defer = true;\r\n            doc.appendChild(script);\r\n        }\r\n\r\n        return this.readySubject.asObservable();\r\n    }\r\n\r\n    public execute(options: any = undefined): Promise<string> {\r\n        const captcha = (<any>window).grecaptcha;\r\n        const captchaElement = document.querySelector('.g-recaptcha.invisible');\r\n\r\n        return captcha.execute(captchaElement.id, options);\r\n    }\r\n\r\n    private onloadCallback() {\r\n        this.readySubject.next(true);\r\n    }\r\n}\r\n\r\n/* singleton pattern taken from https://github.com/angular/angular/issues/13854 */\r\nexport function RECAPTCHA_SERVICE_PROVIDER_FACTORY(ngZone: NgZone, parentDispatcher: ReCaptchaService) {\r\n    return parentDispatcher || new ReCaptchaService(ngZone);\r\n}\r\n\r\nexport const RECAPTCHA_SERVICE_PROVIDER = {\r\n    provide: ReCaptchaService,\r\n    deps: [NgZone, [new Optional(), new SkipSelf(), ReCaptchaService]],\r\n    useFactory: RECAPTCHA_SERVICE_PROVIDER_FACTORY\r\n};\r\n","import {\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    forwardRef,\r\n    Inject,\r\n    Injectable,\r\n    Input,\r\n    NgZone,\r\n    Output,\r\n    ViewChild,\r\n    AfterViewInit,\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\nimport { IRecaptchaOptionType } from './models/recaptcha-option-type.interface';\r\nimport { RECAPTCHA_OPTION } from './recaptch.tokens';\r\nimport { ReCaptchaService } from './recaptcha.service';\r\n\r\n@Component({\r\n    selector: 'recaptcha',\r\n    template: `\r\n        <div #target\r\n            [ngClass]=\"{'hide': hide}\"\r\n            [class]=\"'recaptcha g-recaptcha ' + (size || 'invisible')\"\r\n            [id]=\"widgetId\">\r\n        </div>\r\n    `,\r\n    styles: [`\r\n        .hide {\r\n            display: none;\r\n        }\r\n    `],\r\n    providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef(() => ReCaptchaComponent),\r\n            multi: true\r\n        }\r\n    ]\r\n})\r\n@Injectable()\r\nexport class ReCaptchaComponent implements AfterViewInit, ControlValueAccessor {\r\n    @Input() sitekey: string;\r\n    @Input() size: string;\r\n    @Input() theme: string;\r\n    @Input() type: string;\r\n    @Input() tabindex: number;\r\n    @Input() badge: string;\r\n    @Input() language: string;\r\n    @Input() hide: boolean = true;\r\n\r\n    @Output() captchaResponse = new EventEmitter<string>();\r\n    @Output() captchaExpired = new EventEmitter();\r\n\r\n    @ViewChild('target') targetRef: ElementRef;\r\n    widgetId: any = null;\r\n\r\n    private ngUnsubscribe: Subject<void> = new Subject<void>();\r\n\r\n    onChange: Function = () => {};\r\n    onTouched: Function = () => {};\r\n\r\n    constructor(\r\n        private _zone: NgZone,\r\n        private _captchaService: ReCaptchaService,\r\n\r\n        @Inject(RECAPTCHA_OPTION) private option: IRecaptchaOptionType,\r\n    ) {\r\n        option = option || {\r\n            language: 'ru',\r\n            invisible: {\r\n                sitekey: this.sitekey || undefined,\r\n                theme: 'light',\r\n                type: 'image',\r\n                tabindex: 0,\r\n                badge: 'bottomright'\r\n            },\r\n        };\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.setWidgetId();\r\n    }\r\n\r\n    public reset() {\r\n        if (this.widgetId === null) {\r\n            return;\r\n        }\r\n        this.grecaptchaReset();\r\n        this.onChange(null);\r\n    }\r\n\r\n    public setWidgetId() {\r\n        this._captchaService.getReady(this.language || this.option.language)\r\n            .pipe(\r\n                takeUntil(this.ngUnsubscribe)\r\n            )\r\n            .subscribe((ready) => {\r\n                if (!ready) {\r\n                    return;\r\n                }\r\n                this.widgetId = this.render(this.targetRef.nativeElement);\r\n            });\r\n    }\r\n\r\n    public render(target) {\r\n        return (<any>window).grecaptcha.render(target, {\r\n            'sitekey': this.getSiteKey(),\r\n            'badge': this.getBadge(),\r\n            'theme': this.getTheme(),\r\n            'type': this.getType(),\r\n            'tabindex': this.getTabindex(),\r\n            'size': this.size || 'invisible',\r\n            'callback': <any>((response: any) => this._zone.run(this.recaptchaCallback.bind(this, response))),\r\n            'expired-callback': <any>(() => this._zone.run(this.recaptchaExpiredCallback.bind(this)))\r\n        });\r\n    }\r\n\r\n    public execute(options: any = undefined) {\r\n        if (this.size !== 'invisible') {\r\n            return;\r\n        }\r\n\r\n        if (this.widgetId === null) {\r\n            throw new Error('Invalid widgetId');\r\n        }\r\n        return (<any>window).grecaptcha.execute(this.widgetId, options);\r\n    }\r\n\r\n    public getResponse(): string {\r\n        if (this.widgetId === null) {\r\n            throw new Error('Invalid widgetId');\r\n        }\r\n        return (<any>window).grecaptcha.getResponse(this.widgetId);\r\n    }\r\n\r\n    writeValue(newValue: any): void {\r\n        /* ignore it */\r\n    }\r\n\r\n    registerOnChange(fn: any): void {\r\n        this.onChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: any): void {\r\n        this.onTouched = fn;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.grecaptchaReset();\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n\r\n    private recaptchaCallback(response: string) {\r\n        this.onChange(response);\r\n        this.onTouched();\r\n        this.captchaResponse.emit(response);\r\n    }\r\n\r\n    private recaptchaExpiredCallback() {\r\n        this.onChange(null);\r\n        this.onTouched();\r\n        this.captchaExpired.emit();\r\n    }\r\n\r\n    private grecaptchaReset() {\r\n        if (this.widgetId != null) {\r\n          this._zone.runOutsideAngular(() => (<any>window).grecaptcha.reset(this.widgetId));\r\n        }\r\n    }\r\n\r\n    private getSiteKey() {\r\n        if (this.sitekey) {\r\n            return this.sitekey;\r\n        }\r\n\r\n        if (this.size === 'invisible') {\r\n            return this.option.invisible.sitekey;\r\n        }\r\n\r\n        if (this.size === 'normal') {\r\n            return this.option.normal.sitekey;\r\n        }\r\n\r\n        throw new Error('Invalid sitekey');\r\n    }\r\n\r\n    private getBadge() {\r\n        if (this.badge) {\r\n            return this.badge;\r\n        }\r\n\r\n        if (this.size === 'invisible') {\r\n            return this.option.invisible.badge;\r\n        }\r\n\r\n        if (this.size === 'normal') {\r\n            return this.option.normal.badge;\r\n        }\r\n\r\n        return 'bottomright';\r\n    }\r\n\r\n    private getTheme() {\r\n        if (this.theme) {\r\n            return this.theme;\r\n        }\r\n\r\n        if (this.size === 'invisible') {\r\n            return this.option.invisible.theme;\r\n        }\r\n\r\n        if (this.size === 'normal') {\r\n            return this.option.normal.theme;\r\n        }\r\n\r\n        return 'light';\r\n    }\r\n\r\n    private getType() {\r\n        if (this.type) {\r\n            return this.type;\r\n        }\r\n\r\n        if (this.size === 'invisible') {\r\n            return this.option.invisible.type;\r\n        }\r\n\r\n        if (this.size === 'normal') {\r\n            return this.option.normal.type;\r\n        }\r\n\r\n        return 'image';\r\n    }\r\n\r\n    private getTabindex() {\r\n        if (this.tabindex) {\r\n            return this.tabindex;\r\n        }\r\n\r\n        if (this.size === 'invisible') {\r\n            return this.option.invisible.tabindex;\r\n        }\r\n\r\n        if (this.size === 'normal') {\r\n            return this.option.normal.tabindex;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { ModuleWithProviders, NgModule } from '@angular/core';\r\n\r\nimport { IRecaptchaOptionType } from './models/recaptcha-option-type.interface';\r\nimport { RECAPTCHA_OPTION } from './recaptch.tokens';\r\nimport { ReCaptchaComponent } from './recaptcha.component';\r\nimport { RECAPTCHA_SERVICE_PROVIDER } from './recaptcha.service';\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    declarations: [ReCaptchaComponent],\r\n    exports: [ReCaptchaComponent],\r\n    providers: [RECAPTCHA_SERVICE_PROVIDER]\r\n})\r\n\r\nexport class ReCaptchaModule {\r\n    static forRoot(option: IRecaptchaOptionType = undefined): ModuleWithProviders<ReCaptchaModule> {\r\n        return {\r\n            ngModule: ReCaptchaModule,\r\n            providers: [\r\n                {\r\n                    provide: RECAPTCHA_OPTION,\r\n                    useValue: option\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["InjectionToken","BehaviorSubject","Injectable","NgZone","Optional","SkipSelf","EventEmitter","Subject","takeUntil","Component","NG_VALUE_ACCESSOR","forwardRef","Inject","Input","Output","ViewChild","NgModule","CommonModule"],"mappings":"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"}