{"version":3,"sources":["../../src/recaptch.tokens.ts","../../src/recaptcha.service.ts","../../src/recaptcha.component.ts","../../src/recaptcha.module.ts"],"names":["RECAPTCHA_OPTION","InjectionToken","ReCaptchaService","zone","_this","this","scriptLoaded","readySubject","BehaviorSubject","window","run","onloadCallback","bind","prototype","getReady","language","doc","document","body","script","createElement","innerHTML","src","async","defer","appendChild","asObservable","execute","options","undefined","captcha","grecaptcha","captchaElement","querySelector","id","next","RECAPTCHA_SERVICE_PROVIDER_FACTORY","ngZone","parentDispatcher","Injectable","NgZone","RECAPTCHA_SERVICE_PROVIDER","provide","deps","Optional","SkipSelf","useFactory","ReCaptchaComponent","_zone","_captchaService","option","hide","captchaResponse","EventEmitter","captchaExpired","widgetId","ngUnsubscribe","Subject","onChange","onTouched","invisible","sitekey","theme","type","tabindex","badge","ngAfterViewInit","setWidgetId","reset","grecaptchaReset","pipe","takeUntil","subscribe","ready","render","targetRef","nativeElement","target","getSiteKey","getBadge","getTheme","getType","getTabindex","size","callback","response","recaptchaCallback","expired-callback","recaptchaExpiredCallback","Error","getResponse","writeValue","newValue","registerOnChange","fn","registerOnTouched","ngOnDestroy","complete","emit","runOutsideAngular","normal","Component","args","selector","template","providers","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","Inject","Input","Output","ViewChild","ReCaptchaModule","forRoot","ngModule","useValue","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\r\n\r\nimport { IRecaptchaOptionType } from './models/recaptcha-option-type.interface';\r\n\r\nexport const RECAPTCHA_OPTION = new InjectionToken<IRecaptchaOptionType>('RECAPTCHA_OPTION');\r\n","import { Injectable, NgZone, Optional, SkipSelf } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n/*\r\n * Common service shared by all reCaptcha component instances\r\n * through dependency injection.\r\n * This service has the task of loading the reCaptcha API once for all.\r\n * Only the first instance of the component creates the service, subsequent\r\n * components will use the existing instance.\r\n *\r\n * As the language is passed to the <script>, the first component\r\n * determines the language of all subsequent components. This is a limitation\r\n * of the present Google API.\r\n */\r\n\r\n\r\n@Injectable()\r\nexport class ReCaptchaService {\r\n\r\n    private scriptLoaded = false;\r\n    private readySubject: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n    constructor(zone: NgZone) {\r\n        /* the callback needs to exist before the API is loaded */\r\n        if (typeof window !== 'undefined') {\r\n            window[<any>'reCaptchaOnloadCallback'] = <any>(() => {\r\n                zone.run(this.onloadCallback.bind(this));\r\n            });\r\n        }\r\n    }\r\n\r\n    public getReady(language: string): Observable<boolean> {\r\n         if (!this.scriptLoaded) {\r\n            this.scriptLoaded = true;\r\n            let doc = <HTMLDivElement>document.body;\r\n            let script = document.createElement('script');\r\n            script.innerHTML = '';\r\n            script.src = 'https://www.google.com/recaptcha/api.js?onload=reCaptchaOnloadCallback&render=explicit' +\r\n                (language ? '&hl=' + language : '');\r\n            script.async = true;\r\n            script.defer = true;\r\n            doc.appendChild(script);\r\n        }\r\n\r\n        return this.readySubject.asObservable();\r\n    }\r\n\r\n    public execute(options: any = undefined): Promise<string> {\r\n        const captcha = (<any>window).grecaptcha;\r\n        const captchaElement = document.querySelector('.g-recaptcha.invisible');\r\n\r\n        return captcha.execute(captchaElement.id, options);\r\n    }\r\n\r\n    private onloadCallback() {\r\n        this.readySubject.next(true);\r\n    }\r\n}\r\n\r\n/* singleton pattern taken from https://github.com/angular/angular/issues/13854 */\r\nexport function RECAPTCHA_SERVICE_PROVIDER_FACTORY(ngZone: NgZone, parentDispatcher: ReCaptchaService) {\r\n    return parentDispatcher || new ReCaptchaService(ngZone);\r\n}\r\n\r\nexport const RECAPTCHA_SERVICE_PROVIDER = {\r\n    provide: ReCaptchaService,\r\n    deps: [NgZone, [new Optional(), new SkipSelf(), ReCaptchaService]],\r\n    useFactory: RECAPTCHA_SERVICE_PROVIDER_FACTORY\r\n};\r\n","import {\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    forwardRef,\r\n    Inject,\r\n    Injectable,\r\n    Input,\r\n    NgZone,\r\n    Output,\r\n    ViewChild,\r\n    AfterViewInit,\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\nimport { IRecaptchaOptionType } from './models/recaptcha-option-type.interface';\r\nimport { RECAPTCHA_OPTION } from './recaptch.tokens';\r\nimport { ReCaptchaService } from './recaptcha.service';\r\n\r\n@Component({\r\n    selector: 'recaptcha',\r\n    template: `\r\n        <div #target\r\n            [ngClass]=\"{'hide': hide}\"\r\n            [class]=\"'recaptcha g-recaptcha ' + (size || 'invisible')\"\r\n            [id]=\"widgetId\">\r\n        </div>\r\n    `,\r\n    styles: [`\r\n        .hide {\r\n            display: none;\r\n        }\r\n    `],\r\n    providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef(() => ReCaptchaComponent),\r\n            multi: true\r\n        }\r\n    ]\r\n})\r\n@Injectable()\r\nexport class ReCaptchaComponent implements AfterViewInit, ControlValueAccessor {\r\n    @Input() sitekey: string;\r\n    @Input() size: string;\r\n    @Input() theme: string;\r\n    @Input() type: string;\r\n    @Input() tabindex: number;\r\n    @Input() badge: string;\r\n    @Input() language: string;\r\n    @Input() hide: boolean = true;\r\n\r\n    @Output() captchaResponse = new EventEmitter<string>();\r\n    @Output() captchaExpired = new EventEmitter();\r\n\r\n    @ViewChild('target') targetRef: ElementRef;\r\n    widgetId: any = null;\r\n\r\n    private ngUnsubscribe: Subject<void> = new Subject<void>();\r\n\r\n    onChange: Function = () => {};\r\n    onTouched: Function = () => {};\r\n\r\n    constructor(\r\n        private _zone: NgZone,\r\n        private _captchaService: ReCaptchaService,\r\n\r\n        @Inject(RECAPTCHA_OPTION) private option: IRecaptchaOptionType,\r\n    ) {\r\n        option = option || {\r\n            language: 'ru',\r\n            invisible: {\r\n                sitekey: this.sitekey || undefined,\r\n                theme: 'light',\r\n                type: 'image',\r\n                tabindex: 0,\r\n                badge: 'bottomright'\r\n            },\r\n        };\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.setWidgetId();\r\n    }\r\n\r\n    public reset() {\r\n        if (this.widgetId === null) {\r\n            return;\r\n        }\r\n        this.grecaptchaReset();\r\n        this.onChange(null);\r\n    }\r\n\r\n    public setWidgetId() {\r\n        this._captchaService.getReady(this.language || this.option.language)\r\n            .pipe(\r\n                takeUntil(this.ngUnsubscribe)\r\n            )\r\n            .subscribe((ready) => {\r\n                if (!ready) {\r\n                    return;\r\n                }\r\n                this.widgetId = this.render(this.targetRef.nativeElement);\r\n            });\r\n    }\r\n\r\n    public render(target) {\r\n        return (<any>window).grecaptcha.render(target, {\r\n            'sitekey': this.getSiteKey(),\r\n            'badge': this.getBadge(),\r\n            'theme': this.getTheme(),\r\n            'type': this.getType(),\r\n            'tabindex': this.getTabindex(),\r\n            'size': this.size || 'invisible',\r\n            'callback': <any>((response: any) => this._zone.run(this.recaptchaCallback.bind(this, response))),\r\n            'expired-callback': <any>(() => this._zone.run(this.recaptchaExpiredCallback.bind(this)))\r\n        });\r\n    }\r\n\r\n    public execute(options: any = undefined) {\r\n        if (this.size !== 'invisible') {\r\n            return;\r\n        }\r\n\r\n        if (this.widgetId === null) {\r\n            throw new Error('Invalid widgetId');\r\n        }\r\n        return (<any>window).grecaptcha.execute(this.widgetId, options);\r\n    }\r\n\r\n    public getResponse(): string {\r\n        if (this.widgetId === null) {\r\n            throw new Error('Invalid widgetId');\r\n        }\r\n        return (<any>window).grecaptcha.getResponse(this.widgetId);\r\n    }\r\n\r\n    writeValue(newValue: any): void {\r\n        /* ignore it */\r\n    }\r\n\r\n    registerOnChange(fn: any): void {\r\n        this.onChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: any): void {\r\n        this.onTouched = fn;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.grecaptchaReset();\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n\r\n    private recaptchaCallback(response: string) {\r\n        this.onChange(response);\r\n        this.onTouched();\r\n        this.captchaResponse.emit(response);\r\n    }\r\n\r\n    private recaptchaExpiredCallback() {\r\n        this.onChange(null);\r\n        this.onTouched();\r\n        this.captchaExpired.emit();\r\n    }\r\n\r\n    private grecaptchaReset() {\r\n        if (this.widgetId != null) {\r\n          this._zone.runOutsideAngular(() => (<any>window).grecaptcha.reset(this.widgetId));\r\n        }\r\n    }\r\n\r\n    private getSiteKey() {\r\n        if (this.sitekey) {\r\n            return this.sitekey;\r\n        }\r\n\r\n        if (this.size === 'invisible') {\r\n            return this.option.invisible.sitekey;\r\n        }\r\n\r\n        if (this.size === 'normal') {\r\n            return this.option.normal.sitekey;\r\n        }\r\n\r\n        throw new Error('Invalid sitekey');\r\n    }\r\n\r\n    private getBadge() {\r\n        if (this.badge) {\r\n            return this.badge;\r\n        }\r\n\r\n        if (this.size === 'invisible') {\r\n            return this.option.invisible.badge;\r\n        }\r\n\r\n        if (this.size === 'normal') {\r\n            return this.option.normal.badge;\r\n        }\r\n\r\n        return 'bottomright';\r\n    }\r\n\r\n    private getTheme() {\r\n        if (this.theme) {\r\n            return this.theme;\r\n        }\r\n\r\n        if (this.size === 'invisible') {\r\n            return this.option.invisible.theme;\r\n        }\r\n\r\n        if (this.size === 'normal') {\r\n            return this.option.normal.theme;\r\n        }\r\n\r\n        return 'light';\r\n    }\r\n\r\n    private getType() {\r\n        if (this.type) {\r\n            return this.type;\r\n        }\r\n\r\n        if (this.size === 'invisible') {\r\n            return this.option.invisible.type;\r\n        }\r\n\r\n        if (this.size === 'normal') {\r\n            return this.option.normal.type;\r\n        }\r\n\r\n        return 'image';\r\n    }\r\n\r\n    private getTabindex() {\r\n        if (this.tabindex) {\r\n            return this.tabindex;\r\n        }\r\n\r\n        if (this.size === 'invisible') {\r\n            return this.option.invisible.tabindex;\r\n        }\r\n\r\n        if (this.size === 'normal') {\r\n            return this.option.normal.tabindex;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { ModuleWithProviders, NgModule } from '@angular/core';\r\n\r\nimport { IRecaptchaOptionType } from './models/recaptcha-option-type.interface';\r\nimport { RECAPTCHA_OPTION } from './recaptch.tokens';\r\nimport { ReCaptchaComponent } from './recaptcha.component';\r\nimport { RECAPTCHA_SERVICE_PROVIDER } from './recaptcha.service';\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    declarations: [ReCaptchaComponent],\r\n    exports: [ReCaptchaComponent],\r\n    providers: [RECAPTCHA_SERVICE_PROVIDER]\r\n})\r\n\r\nexport class ReCaptchaModule {\r\n    static forRoot(option: IRecaptchaOptionType = undefined): ModuleWithProviders<ReCaptchaModule> {\r\n        return {\r\n            ngModule: ReCaptchaModule,\r\n            providers: [\r\n                {\r\n                    provide: RECAPTCHA_OPTION,\r\n                    useValue: option\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}\r\n"]}